import matplotlib.pyplot as plt
from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg
import tkinter as tk
import numpy as np
import time

# Import the necessary libraries to read data from the ADC
import Adafruit_GPIO.SPI as SPI
import Adafruit_MCP3008

# Set up the ADC
CLK = 18
MISO = 23
MOSI = 24
CS = 25
mcp = Adafruit_MCP3008.MCP3008(clk=CLK, cs=CS, miso=MISO, mosi=MOSI)

# Create a Tkinter window
root = tk.Tk()

# Create a Matplotlib figure
fig = plt.figure(figsize=(5, 4), dpi=100)

# Add a subplot to the figure
ax = fig.add_subplot(111)

# Create an empty plot
line, = ax.plot([], [])

# Add labels and titles
ax.set_xlabel("Time")
ax.set_ylabel("ADC Value")
ax.set_title("ADC Data Plot")

# Set the x and y limits of the plot
ax.set_xlim(0, 10)
ax.set_ylim(0, 1023)

# Create a Tkinter canvas to display the plot
canvas = FigureCanvasTkAgg(fig, master=root)
canvas.draw()
canvas.get_tk_widget().pack(side=tk.TOP, fill=tk.BOTH, expand=1)

# Define a function to read data from the ADC and update the plot
def update_plot():
    # Read the ADC value
    adc_value = mcp.read_adc(0)

    # Append the new data point to the plot data
    x_data = line.get_xdata()
    y_data = line.get_ydata()
    x_data = np.append(x_data, time.time())
    y_data = np.append(y_data, adc_value)
    line.set_data(x_data, y_data)

    # Update the x and y limits of the plot
    ax.set_xlim(max(0, x_data[-1] - 10), x_data[-1] + 1)
    ax.set_ylim(0, 1023)

    # Redraw the canvas
    canvas.draw()

    # Schedule the function to be called again in 100 ms
    root.after(100, update_plot)

# Start the update loop
update_plot()

# Run the Tkinter event loop
tk.mainloop()
In this example code snippet, we import the necessary libraries to read data from the ADC and set up the ADC using the Adafruit_MCP3008 library. We then create a Tkinter window and a Matplotlib figure with an empty plot. We also set the x and y limits of the plot and create a Tkinter canvas to display the plot.

We then define a function called update_plot() that reads a new data point from the ADC, appends it to the plot data, updates the x and y limits of the plot, and redraws the canvas. We also use the root.after() method to schedule the update_plot() function to be called again in 100 ms.

Finally, we start the update loop by calling the update_plot() function, and we run the Tkinter event loop using tk.mainloop(). As new data is acquired from the ADC, the plot will continuously update itself in real-time.





